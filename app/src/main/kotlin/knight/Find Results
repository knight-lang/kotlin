Searching 12 files for "Stream" (regex, case sensitive)

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Function.kt:
   35  				try {
   36  					var proc = builder.start()
   37: 					output = proc.inputStream.use { return@use String(it.readAllBytes()) }
   38  					proc.waitFor()
   39  				} catch (err: java.io.IOException) {

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Knight.kt:
    1  package knight
    2  
    3: import knight.Stream
    4  import knight.Value
    5  import kotlin.system.exitProcess
    .
   12   * @throws ParseException Thrown when [input] contains invalid Knight syntax.
   13   */
   14: fun run(input: String): Value = Stream(input).parse()?.run() ?: throw ParseException("nothing to parse")
   15  
   16  private fun usage() : Nothing {

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Stream.kt:
    1  package knight
    2  
    3: internal class Stream: Iterator<Char> {
    4  	private val iter: Iterator<Char>
    5  	private var prev: Char = '\u0000'
    .
   44  	}
   45  
   46: 	// fun parse(string: String): Value? = parse(Stream(string))
   47  	fun parse(): Value? {
   48: 		fun Stream.dropKeyword() = takeWhile { it.isUpperCase() || it == '_' }
   49  
   50  		return when (val c = peek() ?: return null) {

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Value.kt:
    1  package knight
    2: import knight.Stream
    3  
    4  class BadType(message: String) : KnightException(message)

7 matches across 4 files


Searching 12 files for "\bStream\b" (regex, case sensitive)

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Knight.kt:
    1  package knight
    2  
    3: import knight.Stream
    4  import knight.Value
    5  import kotlin.system.exitProcess
    .
   12   * @throws ParseException Thrown when [input] contains invalid Knight syntax.
   13   */
   14: fun run(input: String): Value = Stream(input).parse()?.run() ?: throw ParseException("nothing to parse")
   15  
   16  private fun usage() : Nothing {

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Stream.kt:
    1  package knight
    2  
    3: internal class Stream: Iterator<Char> {
    4  	private val iter: Iterator<Char>
    5  	private var prev: Char = '\u0000'
    .
   44  	}
   45  
   46: 	// fun parse(string: String): Value? = parse(Stream(string))
   47  	fun parse(): Value? {
   48: 		fun Stream.dropKeyword() = takeWhile { it.isUpperCase() || it == '_' }
   49  
   50  		return when (val c = peek() ?: return null) {

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Value.kt:
    1  package knight
    2: import knight.Stream
    3  
    4  class BadType(message: String) : KnightException(message)

6 matches across 3 files


Searching 12 files for "import\s*knight" (regex, case sensitive)

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Function.kt:
    1  package knight
    2  
    3: import knight.Value
    4: import knight.NonIdempotent
    5: import knight.Number
    6  
    7  class Ast(val func: Function, val args: Array<Value>): NonIdempotent() {

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Knight.kt:
    1  package knight
    2  
    3: import knight.Stream
    4: import knight.Value
    5  import kotlin.system.exitProcess
    6  import java.io.File

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Number.kt:
    1  package knight
    2  
    3: import knight.Value
    4  import kotlin.math.pow
    5  import kotlin.math.roundToLong

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Text.kt:
    1  package knight
    2  
    3: import knight.Value
    4  
    5  class Text(val text: String) : Value {

/Users/samp/me/knight/kotlin/app/src/main/kotlin/knight/Variable.kt:
    1  package knight
    2  
    3: import knight.NonIdempotent
    4  
    5  class Variable private constructor(final val name: String): NonIdempotent() {

8 matches across 5 files
